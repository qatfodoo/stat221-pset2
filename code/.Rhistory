})
files.param[[1]]
files.param[[2]]
# Simulation parameters for object initialization
J <- 1000
N <- 2
w <- as.numeric(unlist(read.table("weights.txt"))) # distinct weights
B <-35 #1000 # Number of simulations
B.theta <- 7 #40 # theta drawss
B.y <- floor(B / B.theta) # y draws for each theta
n.param <- 4 # Number of parameters
n.t <- 3 # Number of tasks per parameter
# Initialize list of parameter's stacked outputs
ltheta.list <- replicate(n.param, matrix(data=0, nrow=J, ncol= B.theta * n.t), simplify=F) # Store log.theta values
ltheta_mean.list <- replicate(n.param, replicate(B.theta, matrix(data=0, nrow=J, ncol= B.y * n.t),
simplify=F), simplify=F) # Store posterior means of draws
ltheta_sd.list <- replicate(n.param, replicate(B.theta, matrix(data=0, nrow=J, ncol= B.y * n.t),
simplify=F), simplify=F) # Store posterior sd of drawslog.theta_mean
cov68.list <- replicate(n.param, matrix(data=0, nrow=J, ncol= B.theta * n.t), simplify=F) # Store 68% frequency coverage for thetas
cov95.list <- replicate(n.param, matrix(data=0, nrow=J, ncol= B.theta), simplify=F) # Store 95% frequency coverage for theta
# Get list of files corresponding to each parameter
files.param <- sapply(1:4, function(i) {
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep=""))
})
for (p in 1:n.param) {
for (t in 1:3) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
# Load output from current task for parameter
load(files.param[[p]][t])
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta):(t*B.theta)] <- log.theta_mat
}
}
for (p in 1:n.param) {
for (t in 1:3) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
# Load output from current task for parameter
load(paste("./out/task4", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta):(t*B.theta)] <- log.theta_mat
}
}
for (p in 1:n.param) {
for (t in 1:3) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta):(t*B.theta)] <- log.theta_mat
}
}
p <- 1
t<-1
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
dim(log.theta_mat)
# Get list of files corresponding to each parameter
files.param <- sapply(1:4, function(i) {
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep=""))
})
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta):(t*B.theta)] <- log.theta_mat
ltheta.list[[1]][, 1:400]
ltheta.list[[1]][, 1:10]
ltheta.list[[1]][, 1:7]
for (p in 1:n.param) {
for (t in 1:3) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta):(t*B.theta)] <- log.theta_mat
}
}
# Get list of files corresponding to each parameter
files.param <- sapply(1:4, function(i) {
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep=""))
})
files.param[[1]]
files.param[[2]]
files.param[[3]]
files.param[[4]]
files.param[[5]]
files.param[[6]]
i <- 1
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep=""))
?sapply
# Get list of files corresponding to each parameter
files.param <- sapply(1:4, function(i) {
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep=""))
}, simplify=F)
files.param[[5]]
files.param[[3]]
files.param <- sapply(1:4, function(i) {
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep="")),
}, simplify=F)
files.param <- sapply(1:4, function(i) {
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep="")),
}, simplify=F)
# Get list of files corresponding to each parameter
files.param <- sapply(1:4, function(i) {
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep=""))
}, simplify=F)
files.param <- sapply(1:4, function(i) {
list.files(path = "./out/task4", pattern = paste("param" ,i, "+", sep=""))
}, simplify=F)
for (p in 1:n.param) {
for (t in 1:3) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta):(t*B.theta)] <- log.theta_mat
}
}
1:3
for (p in 1:n.param) {
for (t in 1:3) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta + 1):(t*B.theta)] <- log.theta_mat
}
}
ltheta.list[[1]][, 7:9]
ltheta.list[[1]][, 7:10]
ltheta.list[[1]][, 7:11]
ltheta.list[[1]][, 9:21]
dim(ltheta.list[[1]])
ltheta.list[[1]][, 20:21]
for (p in 1:n.param) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
for (t in 1:3) {
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta + 1):(t*B.theta)] <- log.theta_mat
for (i.logt in 1:B.theta) {
ltheta_mean.list[[p]][[(t - 1) * B.theta + i.logt]] <- log.theta_mean
}
}
}
ltheta_mean.list[[1]]
ltheta_mean.list[[1]][[`]]
ltheta_mean.list[[1]][[1]]
dim(ltheta_mean.list[[1]][[1]])
length(ltheta_mean.list[[1]][[1]])
dim(ltheta_mean.list[[1]][[1]])
ltheta_mean.list[[1]][[1]][1,1]
ltheta_mean.list[[1]][[1]][1]
ltheta_mean.list[[1]][[1]][[1]]
ltheta_mean.list[[1]][[1]][[1]][1, 2]
for (p in 1:n.param) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
for (t in 1:3) {
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta + 1):(t*B.theta)] <- log.theta_mat
for (i.logt in 1:B.theta) {
ltheta_mean.list[[p]][[(t - 1) * B.theta + i.logt]] <- log.theta_mean[[i.logt]]
}
}
}
ltheta_mean.list[[1]][[1]][1,1]
for (p in 1:n.param) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
for (t in 1:3) {
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta + 1):(t*B.theta)] <- log.theta_mat
for (i.logt in 1:B.theta) {
ltheta_mean.list[[p]][[(t - 1) * B.theta + i.logt]] <- log.theta_mean[[i.logt]]
ltheta_sd.list[[p]][[(t - 1) * B.theta + i.logt]] <- log.theta_sd[[i.logt]]
}
cov68.list[[p]][, ((t - 1) * B.theta + 1):(t*B.theta)] <- cov68_mat
cov95.list[[p]][, ((t - 1) * B.theta + 1):(t*B.theta)] <- cov95_mat
}
}
dim(cov68_mat)
dim(log.theta_mat)
# Initialize list of parameter's stacked outputs
ltheta.list <- replicate(n.param, matrix(data=0, nrow=J, ncol= B.theta * n.t), simplify=F) # Store log.theta values
ltheta_mean.list <- replicate(n.param, replicate(B.theta * n.t, matrix(data=0, nrow=J, ncol= B.y),
simplify=F), simplify=F) # Store posterior means of draws
ltheta_sd.list <- replicate(n.param, replicate(B.theta * n.t, matrix(data=0, nrow=J, ncol= B.y),
simplify=F), simplify=F) # Store posterior sd of drawslog.theta_mean
cov68.list <- replicate(n.param, matrix(data=0, nrow=J, ncol= B.theta * n.t), simplify=F) # Store 68% frequency coverage for thetas
cov95.list <- replicate(n.param, matrix(data=0, nrow=J, ncol= B.theta * n.t), simplify=F) # Store 95% frequency coverage for theta
for (p in 1:n.param) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
for (t in 1:3) {
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta + 1):(t * B.theta)] <- log.theta_mat
for (i.logt in 1:B.theta) {
ltheta_mean.list[[p]][[(t - 1) * B.theta + i.logt]] <- log.theta_mean[[i.logt]]
ltheta_sd.list[[p]][[(t - 1) * B.theta + i.logt]] <- log.theta_sd[[i.logt]]
}
cov68.list[[p]][, ((t - 1) * B.theta + 1):(t * B.theta)] <- cov68_mat
cov95.list[[p]][, ((t - 1) * B.theta + 1):(t * B.theta)] <- cov95_mat
}
}
for (p in 1:n.param) {
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
for (t in 1:3) {
# Load output from current task for parameter
load(paste("./out/task4/", files.param[[p]][t], sep=""))
# Update stacked output
ltheta.list[[p]][, ((t - 1) * B.theta + 1):(t * B.theta)] <- log.theta_mat
for (i.logt in 1:B.theta) {
ltheta_mean.list[[p]][[(t - 1) * B.theta + i.logt]] <- log.theta_mean[[i.logt]]
ltheta_sd.list[[p]][[(t - 1) * B.theta + i.logt]] <- log.theta_sd[[i.logt]]
}
cov68.list[[p]][, ((t - 1) * B.theta + 1):(t * B.theta)] <- cov68_mat
cov95.list[[p]][, ((t - 1) * B.theta + 1):(t * B.theta)] <- cov95_mat
}
}
cov68.list[[1]]
dim(cov68.list[[1]])
w
w.list <- replicate(n.param, matrix(data=w, nrow=J, ncol= B.theta * n.t), simplify=F)
w.list[[1]]
dim(w.list[[1]])
w.list[[1]][, 1] == w.list[[1]][, 8]
w.list[[1]][, 1] === w.list[[1]][, 8]
w.list[[1]][, 1] == w.list[[1]][, 8]
all(w.list[[1]][, 1] == w.list[[1]][, 8])
p <- 1
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
log(w)
logw.list <- replicate(n.param, matrix(data=log(w), nrow=J, ncol= B.theta * n.t), simplify=F)
logw <- logw.list[[p]]
list(n=4)
list(5)
?list
p.list <- vector("list", n.param) # List of plots
plot.new()
frame()
dev.off()
x11()
m=matrix(1:12,3,4)
m
as.vector(t(m))
as.vector(m)
p_list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68)))
library(ggplot2)
p_list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68)))
p.list <- vector("list", n.param) # List of plots
p_list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68)))
p.list <- vector("list", n.param) # List of plots
p.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68)))
p.list[[1]]
p.list[[p]] + geom_line(size=2, alpha=1/2, colour="blue") +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylab("quote-rate") +
xlab("Day") +
labs(title="Daily evolution of invite-to-quote rate")
p.list[[p]] +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylab("Coverage") +
xlab("log.theta") +
labs(title="Coverage against Log Theta")
p.list[[p]] +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1)
ylab("Coverage") +
xlab("log.theta") +
labs(title="Coverage against Log Theta")
length(as.vector(ltheta))
p_logw.list <- vector("list", n.param) # List of plots against log w
x11() # Create new plot window
p_logw.list[[p]] <- ggplot(aes(x=as.vector(logw), as.vector(cov68)))
x11() # Create new plot window
p_logw.list[[p]] +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1)
ylab("Coverage") +
xlab("log.w") +
labs(title="Coverage against Log w")
p_logw.list[[p]] <- ggplot(aes(x=as.vector(logw), as.vector(cov68)))
log
W
logw
dim(logw)
length(as.vector(logw))
ggplot(aes(x=as.vector(logw), as.vector(cov68)))
p_logt.list[[p]] <- ggplot(aes(x=as.vector(ltheta), as.vector(cov68)))
p_logt.list[[p]] <- ggplot(aes(x=as.vector(ltheta), as.vector(cov68)))
p_logt.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68)))
p_logt.list <- vector("list", n.param) # List of plots against log theta
p_logt.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68)))
x11() # Create new plot window
p_logw.list[[p]] <- ggplot(, aes(x=as.vector(logw), as.vector(cov68)))
x11() # Create new plot window
p_logw.list[[p]] +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1)
ylab("Coverage") +
xlab("log.w") +
labs(title="Coverage against Log w")
x11() # Create new plot window
par(mfrow=c(2, 1))
p.list[[p]] +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1)
ylab("Coverage") +
xlab("log.theta") +
labs(title="Coverage against Log Theta")
p_logw.list[[p]] +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1)
ylab("Coverage") +
xlab("log.w") +
labs(title="Coverage against Log w")
p_logt.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1)
ylab("Coverage") +
xlab("log.theta") +
labs(title="Coverage against Log Theta")
p_logt.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("Coverage") +
xlab("log.theta") +
labs(title="Coverage against Log Theta")
p_logw.list[[p]] <- ggplot(, aes(x=as.vector(logw), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("Coverage") +
xlab("log.w") +
labs(title="Coverage against Log w")
source("multiplot.R")
multiplot(p_logt.list[[1]]. p_logw.list[[1]])
multiplot(p_logt.list[[1]], p_logw.list[[1]])
p_logt68.list <- vector("list", n.param) # List of plots against log theta
p_logt95.list <- vector("list", n.param) # List of plots against log theta
p_logw65.list <- vector("list", n.param) # List of plots against log w
p_logw98.list <- vector("list", n.param) # List of plots against log w
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
logw <- logw.list[[p]]
# Plot against log theta
x11() # Create new plot window
p_logt68.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_68") +
xlab("log.theta") +
labs(title="68% coverage against Log Theta")
p_logt95.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov95))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_95") +
xlab("log.theta") +
labs(title="95% coverage against Log Theta")
multiplot(p_logt68.list[[p]], p_logt95.list[[p]])
# Plot againt log w
x11() # Create new plot window
p_logw.list[[p]] <- ggplot(, aes(x=as.vector(logw), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_68") +
xlab("log.w") +
labs(title="68% coverage against Log w")
p_logw.list[[p]] <- ggplot(, aes(x=as.vector(logw), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_95") +
xlab("log.w") +
labs(title="95% coverage against Log w")
multiplot(p_logw68.list[[p]], p_logw95.list[[p]])
p_logt95.list <- vector("list", n.param) # List of plots against log theta
p_logw68.list <- vector("list", n.param) # List of plots against log w
p_logw95.list <- vector("list", n.param) # List of plots against log w
ltheta <- ltheta.list[[p]]
ltheta_mean <- ltheta_mean.list[[p]]
ltheta_sd <- ltheta_sd.list[[p]]
cov68 <- cov68.list[[p]]
cov95 <- cov95.list[[p]]
logw <- logw.list[[p]]
# Plot against log theta
x11() # Create new plot window
p_logt68.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_68") +
xlab("log.theta") +
labs(title="68% coverage against Log Theta")
p_logt95.list[[p]] <- ggplot(, aes(x=as.vector(ltheta), as.vector(cov95))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_95") +
xlab("log.theta") +
labs(title="95% coverage against Log Theta")
multiplot(p_logt68.list[[p]], p_logt95.list[[p]])
# Plot againt log w
x11() # Create new plot window
p_logw.list[[p]] <- ggplot(, aes(x=as.vector(logw), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_68") +
xlab("log.w") +
labs(title="68% coverage against Log w")
p_logw.list[[p]] <- ggplot(, aes(x=as.vector(logw), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_95") +
xlab("log.w") +
labs(title="95% coverage against Log w")
multiplot(p_logw68.list[[p]], p_logw95.list[[p]])
x11() # Create new plot window
p_logw68.list[[p]] <- ggplot(, aes(x=as.vector(logw), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_68") +
xlab("log.w") +
labs(title="68% coverage against Log w")
p_logw95.list[[p]] <- ggplot(, aes(x=as.vector(logw), as.vector(cov68))) +
geom_point(size=3, alpha=1, colour="darkblue") +
geom_smooth(aes(group=1), method = 'loess', size=2, colour='red', se=FALSE) +
ylim(0, 1) +
ylab("cov_95") +
xlab("log.w") +
labs(title="95% coverage against Log w")
multiplot(p_logw68.list[[p]], p_logw95.list[[p]])
